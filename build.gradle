plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.hidetake.swagger.generator' version '2.19.2'
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'

java {
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

    implementation 'com.auth0:java-jwt:4.4.0'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'


}

tasks.named('test') {
    useJUnitPlatform()
}
processResources {
    dependsOn(generateSwaggerCode)}

swaggerSources {
    petstore {
        inputFile = file("${rootDir}/src/main/resources/api/optix.yaml")
        code {
            language = 'spring'
            configFile = file("${rootDir}/src/main/resources/api/config.json")

            //what to generate. Optional.
            components = [models: true, apis: true, supportingFiles: 'ApiUtil.java']
            dependsOn validation //first validate the yaml
        }
    }
}

//Set generated code to sourceSet to be able to used it in the implementation
compileJava.dependsOn swaggerSources.petstore.code
sourceSets.main.java.srcDir "${swaggerSources.petstore.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${swaggerSources.petstore.code.outputDir}/src/main/resources"



